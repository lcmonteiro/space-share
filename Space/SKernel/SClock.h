/**
 * ------------------------------------------------------------------------------------------------
 * File:   SClock.h
 * Author: Luis Monteiro
 *
 * Created on January 19, 2019, 11:23 AM
 * ------------------------------------------------------------------------------------------------
 */
#ifndef SCLOCK_H
#define SCLOCK_H
/**
 * std
 */
#include <chrono>
/**
 * ------------------------------------------------------------------------------------------------
 * Clock 
 * ------------------------------------------------------------------------------------------------
 */
template <
    typename Time  = std::chrono::milliseconds, 
    typename Clock = std::chrono::steady_clock >
class SClock {
public:
    using Pointer  = typename Clock::time_point;
    using Distance = Time;
    /**
     * --------------------------------------------------------------------------------------------
     * Alarm 
     * --------------------------------------------------------------------------------------------
     */
    class Alarm {
    public:
        /**
         * --------------------------------------------------------------------
         * Constructors
         * --------------------------------------------------------------------
         */
        Alarm(const Pointer& end, const Distance& period=Distance::zero())
        : __end(end), __period(period) {}

        Alarm(const Distance& delay, const Distance& period)
        : Alarm(Clock::now() + delay, period) {}
        
        Alarm(const Distance& period)
        : Alarm(period,period) {}
        /**
         * --------------------------------------------------------------------
         * Interfaces 
         * --------------------------------------------------------------------
         * Snooze
         * ------------------------------------------------
         */
        inline Alarm& snooze() {
            __end = Clock::now() + __period;
            return *this;
        }
        /**
         * ------------------------------------------------
         * Sleep
         * ------------------------------------------------
         */
        inline Alarm& sleep() {
            STask::Sleep(
                std::min(__period, Remaining(__end)));
            return *this;
        }
        /**
         * ------------------------------------------------
         * Wait
         * ------------------------------------------------
         */
        inline Alarm& wait() {
            STask::Sleep(
                std::max(Distance::zero(), Remaining(__end)));
            return *this;
        }
        /**
         * ------------------------------------------------
         * Yield
         * ------------------------------------------------
         */
        inline bool yield() {
            return STask::Sleep();
        }
        /**
         * ------------------------------------------------
         * End Point
         * ------------------------------------------------
         */
        inline Pointer trigger() {
            return __end;
        }
        /**
         * ------------------------------------------------
         * Active
         * ------------------------------------------------
         */
        inline bool active() {
            return Clock::now() > __end;
        }
    private:
        /**
         * --------------------------------------------------------------------
         * Variables
         * --------------------------------------------------------------------
         */
        Pointer  __end;
        Distance __period;
    };
    /**
     * --------------------------------------------------------------------------------------------
     * helpers 
     * --------------------------------------------------------------------------------------------
     */
    static inline Distance Remaining(const Pointer& end) {
        return std::chrono::duration_cast<Distance>(end-Clock::now());
    }
};
/**
 * ------------------------------------------------------------------------------------------------
 * End 
 * ------------------------------------------------------------------------------------------------
 */
#endif