/** 
 * --------------------------------------------------------------------------------------------------------------------
 * File: STask.h
 * Author: Monteiro
 *
 * Created on November 26, 2016, 12:37 PM
 * --------------------------------------------------------------------------------------------------------------------
 */
#ifndef STASK_H
#define STASK_H
/**
 * std
 */
#include <thread>
#include <mutex>
#include <map>
/**
 * space
 */
#include "SResource.h"
/**
 * ------------------------------------------------------------------------------------------------
 * Task
 * ------------------------------------------------------------------------------------------------
 **/
class STask : public std::thread {
    /**
     * ------------------------------------------------------------------------
     * Interrupt Task 
     * ------------------------------------------------------------------------
     */
    class SInterrupt : public SResource {
    public:
        /**
         * main constructor
         */
        SInterrupt(bool init = false);
        /**
         * move constructor
         */
        SInterrupt(SInterrupt&&) = default;
        /**
         * move operator
         */
        SInterrupt& operator=(SInterrupt&&) = default;
        /**
         * send interruption
         */
        void send();
    };
public:
    using Time = std::chrono::milliseconds;
    /**
     * ------------------------------------------------------------------------
     * Defaults
     * ------------------------------------------------------------------------
     */
    STask() = default;
    /**
     * ------------------------------------------------------------------------
     * Constructor
     * ------------------------------------------------------------------------
     */
    template<typename Func, typename... Args> explicit
    STask(Func&& f, Args&&... args)
    : std::thread(std::forward<Func>(f), std::forward<Args>(args)...),
    __interrupt(true) {
        _init(std::thread::get_id());
    }
    STask(STask&& t): std::thread(), __interrupt(false) {
        *this = std::move(t);
    }
    /**
     * ------------------------------------------------------------------------
     * Destructor
     * ------------------------------------------------------------------------
     */
    virtual ~STask() {
        _end(std::thread::get_id());
    }
    /**
     * ------------------------------------------------------------------------
     * Move - Operator 
     * ------------------------------------------------------------------------
     */
    STask& operator=(STask&& t) {
        /**
         * swap thread base
         */
        std::thread::swap(t);
        /**
         * swap event
         */
        std::swap(__interrupt, t.__interrupt);
        /**
         * update tasks data base
         */
        _init(std::thread::get_id());
        /**
         * return updated task
         */
        return *this;
    }
    /**
     * ------------------------------------------------------------------------
     * Interrupt
     * ------------------------------------------------------------------------
     */
    inline void interrupt() {
        __interrupt.send();
    }
    /**
     * ------------------------------------------------------------------------
     * Resource
     * ------------------------------------------------------------------------
     */
    inline Resource& resource() {
        return __interrupt;
    }
    /**
     * ------------------------------------------------------------------------
     * Globals
     * ------------------------------------------------------------------------
     * Enable main task
     * ----------------------------------------------------
     */
    static STask& Enable(); 
    /**
     * ----------------------------------------------------
     * This Instance
     * ----------------------------------------------------
     */
    static STask& Instance();
    /**
     * ----------------------------------------------------
     * Sleep This Task
     * ----------------------------------------------------
     */
    static bool Sleep(const Time& timeout = Time::zero());
protected:
    /**
     * ------------------------------------------------------------------------
     * Protected Constructor
     * ------------------------------------------------------------------------
     */
    STask(bool init): std::thread(), __interrupt(init) {} 
    /**
     * ------------------------------------------------------------------------
     * manager tasks 
     * ------------------------------------------------------------------------
     * init / end
     * ----------------------------------------------------
     */
    void _init(std::thread::id id);
    void _end (std::thread::id id);
private:
    /**
     * ------------------------------------------------------------------------
     * variables 
     * ------------------------------------------------------------------------
     * event
     */
    SInterrupt __interrupt;
    /**
     * ------------------------------------------------------------------------
     * Tasks Data Base - Declaration
     * ------------------------------------------------------------------------
     * Static Variables
     * ---------------------------------------------------- 
     */
    using DataBase = std::map<thread::id, STask*>; 
    using Mutex    = std::mutex; 
    static DataBase __tasks;
    static Mutex    __mutex;
    static STask    __init;
    /**
     * ---------------------------------------------------
     * Interfaces
     * ---------------------------------------------------
     */
    static void   _insert(std::thread::id, STask*);
    static STask* _find  (std::thread::id);
    static void   _remove(std::thread::id);
};
/**
 * --------------------------------------------------------------------------------------------------------------------
 * End
 * --------------------------------------------------------------------------------------------------------------------
 **/
#endif /* STASK_H */

