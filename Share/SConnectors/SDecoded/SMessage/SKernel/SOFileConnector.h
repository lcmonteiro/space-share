/**
 * -------------------------------------------------------------------------------------------------------------------- 
 * File:   SOFileConnector.h
 * Author: Luis Monteiro
 *
 * Created on June 6, 2018, 11:47 PM
 * --------------------------------------------------------------------------------------------------------------------
 */
#ifndef SOFILECONNECTOR_H
#define SOFILECONNECTOR_H
/**
 * Space Kernel
 */
#include "SContainer.h"
#include "SAddress.h"
#include "STask.h"
#include "SText.h"
/**
 * Share Kernel
 */
#include "SConnector.h"
/**
 * --------------------------------------------------------------------------------------------------------------------
 * Begin namespace Decoded
 * --------------------------------------------------------------------------------------------------------------------
 */
namespace Decoded {
namespace Message {
/**
 * --------------------------------------------------------------------------------------------------------------------
 * Base - SOFileConnector
 * --------------------------------------------------------------------------------------------------------------------
 */
namespace Base {
/**
 */
template<typename RESOURCE, typename Super>
class SOFileConnector : public Super {
public:
    /**
     * ------------------------------------------------------------------------
     * constructor
     * ------------------------------------------------------------------------
     */
    template<typename V>
    SOFileConnector(const V& v): Super(v.address), __res() {}
protected:
    /**
     * ------------------------------------------------------------------------
     * open
     * ------------------------------------------------------------------------
     */
    inline void _Open() override {
        std::default_random_engine eng{std::random_device{}()};
        // sleep distribution -----------------------------
        std::uniform_int_distribution<> dist{100, 1000};
        // main loop --------------------------------------
        int i = 0;
        do {
            try {
                __res.Link(this->__uri);
                break;
            } catch (std::system_error& ex) {
                WARNING(ex.what());
            }
        } while (STask::Sleep(std::chrono::milliseconds{dist(eng) * ++i}));
    }
    /**
     * ------------------------------------------------------------------------
     * good
     * ------------------------------------------------------------------------
     */
    inline bool _Good() override {
        return __res.Good();
    }
    /**
     * ------------------------------------------------------------------------
     * close
     * ------------------------------------------------------------------------
     */
    inline void _Close() override {
        __res.Reset();
    }
    /**
     * ------------------------------------------------------------------------
     * variables
     * ------------------------------------------------------------------------
     * resource 
     */
    RESOURCE __res;
};
}
/**
 * --------------------------------------------------------------------------------------------------------------------
 * Layer - SOFileConnector
 * --------------------------------------------------------------------------------------------------------------------
 */
namespace Layer {
/**
 */
template<typename Super>
class SOFileConnector : public Super {
public:
    /**
     * ------------------------------------------------------------------------
     * constructor
     * ------------------------------------------------------------------------
     */
    template<typename V>
    SOFileConnector(const V& v): Super(v), __buffer() {}
protected:
    /**
     * ------------------------------------------------------------------------
     * write
     * ------------------------------------------------------------------------
     */
    void _Write(const Document& container) override {
        // log info ---------------------------------------
        INFO("DATA::OUT::"
            << "(n)=" << container.size() << " " 
            << "[0]=" << container.at(0));

        // get size --------------------------------------- 
        auto size = container.Number<framesize_t>();
        
        // reset buffer -----------------------------------
        __buffer.Reset();

        // fill up buffer ---------------------------------
        for(auto& c: container) {
            __buffer.Reserve(c.size()).Write(c);
        }    
        // resize buffer ---------------------------------- 
        __buffer.Shrink(size);
    
        // write buffer -----------------------------------
        this->__res.Drain(__buffer);
    }   
    /**
     * ------------------------------------------------------------------------
     * variables
     * ------------------------------------------------------------------------
     * buffer
     */
    IOFrame __buffer;
};
}
/**
 * --------------------------------------------------------------------------------------------------------------------
 * End namespace Decoded & Message
 * --------------------------------------------------------------------------------------------------------------------
 */
}}
#endif /* SOFILECONNECTOR_H */
